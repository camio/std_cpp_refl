<?xml version="1.0" encoding="utf8"?>
<concepts>
	<baseobject kind="type" name="Type"/>
	<baseobject kind="type" name="Pointer"/>
	<baseobject kind="type" name="size_t"/>
	<unused>
	<baseobject kind="type" name="MetaobjectCategory" label="Metaobject\nCategory"/>
	</unused>

	<baseobject kind="tag" name="global_scope_tag"/>
	<baseobject kind="tag" name="namespace_tag"/>
	<baseobject kind="tag" name="type_tag"/>
	<baseobject kind="tag" name="enum_tag"/>
	<baseobject kind="tag" name="class_tag"/>

	<baseobject kind="const" name="IntegralConstant" label="Integral\nConstant"/>
	<baseobject kind="const" name="BooleanConstant" label="Boolean\nConstant"/>
	<baseobject kind="const" name="StringConstant" label="String\nConstant"/>

	<metaobject name="Metaobject"
		abstract="true"
		reflects="a base-level program feature"
		is_a="a concept modelled by stateless anonymous types generated
by the compiler which allow access to metadata reflecting specific program features"
	/>

	<unused>
	<operation name="get_category" result="MetaobjectCategory">
		<argument type="Metaobject"/>
	</operation>
	</unused>

	<trait name="is_sequence" scope="meta" indicates="MetaobjectSequence" uses="get_category"/>
	<unused>
	<trait name="is_specifier" scope="meta" indicates="MetaSpecifier" uses="get_category"/>
	</unused>

	<trait name="is_namespace" scope="meta" indicates="MetaNamespace" uses="get_category"/>
	<trait name="is_global_scope" scope="meta" indicates="MetaGlobalScope" uses="get_category"/>
	<trait name="is_type" scope="meta" indicates="MetaType" uses="get_category"/>
	<trait name="is_class" scope="meta" indicates="MetaClass" uses="get_category"/>
	<trait name="is_enum" scope="meta" indicates="MetaEnum" uses="get_category"/>
	<trait name="is_variable" scope="meta" indicates="MetaVariable" uses="get_category"/>

	<trait name="has_name" scope="meta" indicates="MetaNamed"/>
	<trait name="has_type" scope="meta" indicates="MetaTyped"/>
	<trait name="has_scope" scope="meta" indicates="MetaScoped"/>
	<trait name="is_scope" scope="meta" indicates="MetaScope"/>
	<trait name="is_alias" scope="meta" indicates="MetaAlias"/>
	<trait name="is_class_member" scope="meta" indicates="MetaClassMember"/>
	<trait name="is_linkable" scope="meta" indicates="MetaLinkable"/>

	<operation name="get_source_file"
		brief="returns the source file path of the declaration of $(reflected) reflected by a $(operand)."
		result="StringConstant"
	>
		<group name="SourceInfo"/>
		<argument type="Metaobject"/>
	</operation>

	<operation name="get_source_line"
		result="IntegralConstant"
		integer="unsigned"
		brief="returns the source file line of the declaration of $(reflected) reflected by a $(operand)."
	>
		<group name="SourceInfo"/>
		<argument type="Metaobject"/>
	</operation>

	<operation name="get_source_column"
		result="IntegralConstant"
		integer="unsigned"
		brief="returns the source file column of the declaration of $(reflected) reflected by a $(operand)."
	>
		<group name="SourceInfo"/>
		<argument type="Metaobject"/>
	</operation>

	<metaobject name="MetaobjectSequence"
		abstract="true"
		label="Metaobject\nSequence"
		brief="is an ordered sequence of metaobjects."
	>
		<generalization concept="Metaobject"/>
	</metaobject>

	<operation name="get_size"
		result="IntegralConstant"
		integer="size_t"
		brief="returns a number of elements in the sequence."
	>
		<argument type="MetaobjectSequence"/>
	</operation>

	<operation name="get_element"
		result="Metaobject"
		brief="returns the i-th element in a MetaobjectSequence."
	>
		<argument type="MetaobjectSequence"/>
		<argument type="size_t" name="Index"/>
	</operation>

	<unused>
	<metaobject name="MetaSpecifier"
		reflects="a specifier"
	>
		<generalization concept="Metaobject"/>
	</metaobject>

	<operation name="get_keyword"
		result="StringConstant"
		brief="returns the keyword of the specifier reflected by a $(operand)."
	>
		<argument type="MetaSpecifier"/>
	</operation>
	</unused>

	<metaobject name="MetaNamed"
		abstract="true"
		reflects="a named declaration"
	>
		<generalization concept="Metaobject"/>
	</metaobject>

	<operation name="get_name"
		result="StringConstant"
		brief="returns the basic name of the $(reflected) reflected by a $(operand)."
	>
		<argument type="MetaNamed"/>
	</operation>

	<metaobject name="MetaTyped"
		abstract="true"
		reflects="base-level construct with a type"
	>
		<generalization concept="Metaobject"/>
	</metaobject>

	<operation name="get_type"
		result="MetaType"
		brief="returns the MetaType reflecting the type of $(reflected) reflected by a $(operand)."
	>
		<argument type="MetaTyped"/>
	</operation>

	<metaobject name="MetaScoped"
		abstract="true"
		reflects="a scoped declaration"
	>
		<generalization concept="Metaobject"/>
	</metaobject>

	<operation name="get_scope"
		result="MetaScope"
		brief="returns the MetaScope reflecting the scope of $(reflected) reflected by a $(operand)."
	>
		<argument type="MetaScoped"/>
	</operation>

	<metaobject name="MetaScope"
		abstract="true"
		reflects="a scope"
	>
		<generalization concept="Metaobject"/>
		<generalization concept="MetaNamed" optional="true"/>
		<generalization concept="MetaScoped" optional="true"/>
	</metaobject>

	<metaobject name="MetaAlias"
		abstract="true"
		reflects="a type or namespace alias"
	>
		<generalization concept="MetaNamed"/>
	</metaobject>

	<operation name="get_aliased"
		result="MetaNamed"
		brief="returns the MetaNamed reflecting the original declaration of $(reflected) reflected by a $(operand)."
	>
		<argument type="MetaAlias"/>
	</operation>

	<metaobject name="MetaClassMember"
		abstract="true"
		reflects="class member"
	>
		<generalization concept="MetaScoped"/>
		<constraint operation="get_scope" trait="is_class"/>
	</metaobject>

	<operation name="is_public"
		result="BooleanConstant"
		brief="returns whether the $(reflected) reflected by a $(operand) was declared with public access."
	>
		<argument type="MetaClassMember"/>
	</operation>

	<metaobject name="MetaLinkable"
		abstract="true"
		reflects="declaration with storage duration and/or linkage"
	>
		<generalization concept="MetaNamed"/>
		<generalization concept="MetaScoped"/>
	</metaobject>

	<operation name="is_static"
		result="BooleanConstant"
		brief="returns whether the $(reflected) reflected by a $(operand) was declared with the static specifier."
	>
		<argument type="MetaLinkable"/>
	</operation>

	<metaobject name="MetaGlobalScope"
		reflects="the global scope"
		label="Meta\nGlobal\nScope"
	>
		<generalization concept="MetaScope"/>
	</metaobject>

	<metaobject name="MetaNamespace"
		reflects="a namespace"
	>
		<generalization concept="MetaNamed"/>
		<generalization concept="MetaScope"/>
		<generalization concept="MetaScoped"/>
	</metaobject>

	<metaobject name="MetaNamespaceAlias"
		reflects="a namespace alias"
		label="Meta\nNamespace\nAlias"
	>
		<generalization concept="MetaNamespace"/>
		<generalization concept="MetaAlias"/>
		<constraint operation="get_aliased" trait="is_namespace"/>
	</metaobject>

	<metaobject name="MetaType"
		reflects="a type"
	>
		<generalization concept="MetaNamed"/>
		<generalization concept="MetaScoped"/>
	</metaobject>

	<operation name="get_reflected_type"
		result="Type"
		brief="returns the the base-level type reflected by a $(operand)."
	>
		<argument type="MetaType"/>
	</operation>

	<metaobject name="MetaTypeAlias"
		label="MetaType\nAlias"
		reflects="a type alias or typedef"
	>
		<generalization concept="MetaType"/>
		<generalization concept="MetaAlias"/>
		<constraint operation="get_aliased" trait="is_type"/>
	</metaobject>

	<metaobject name="MetaClass"
		reflects="a class"
	>
		<generalization concept="MetaType"/>
		<generalization concept="MetaScope"/>
	</metaobject>

	<unused>
	<operation name="get_elaborated_type_specifier"
		result="MetaSpecifier"
		brief="returns a MetaSpecifier reflecting the elaborated type specifier (class,struct,union,...) of $(reflected) reflected by a $(operand)."
	>
		<argument type="MetaClass"/>
	</operation>
	</unused>

	<operation name="get_data_members"
		result="MetaobjectSequence"
		brief="returns a sequence of Metaobjects reflecting the public data members of $(reflected) reflected by a $(operand)."
	>
		<argument type="MetaClass"/>
	</operation>

	<operation name="get_all_data_members"
		result="MetaobjectSequence"
		brief="returns a sequence of Metaobjects reflecting all 
		(including the private and protected)
		data members of $(reflected) reflected by a $(operand)."
	>
		<argument type="MetaClass"/>
	</operation>

	<metaobject name="MetaEnum"
		reflects="an enumeration"
	>
		<generalization concept="MetaType"/>
	</metaobject>

	<metaobject name="MetaEnumClass"
		reflects="a strongly typed enumeration"
	>
		<generalization concept="MetaEnum"/>
		<generalization concept="MetaScope"/>
	</metaobject>

	<metaobject name="MetaVariable"
		reflects="a variable"
	>
		<generalization concept="MetaNamed"/>
		<generalization concept="MetaTyped"/>
		<generalization concept="MetaLinkable"/>
	</metaobject>

	<operation name="get_pointer"
		result="Pointer"
		brief="returns a pointer to the $(reflected) reflected by a $(operand).
		If the variable is a class member then the pointer is a class data member pointer,
		otherwise it is a plain pointer."
	>
		<argument type="MetaVariable"/>
	</operation>

	<metaobject name="MetaDataMember"
		reflects="a class data member"
	>
		<generalization concept="MetaVariable"/>
		<generalization concept="MetaClassMember"/>
	</metaobject>
</concepts>
