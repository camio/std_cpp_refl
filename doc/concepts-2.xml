<?xml version="1.0" encoding="utf8"?>
<concepts>
	<baseobject kind="type" name="OriginalType"/>
	<baseobject kind="type" name="Pointer"/>
	<baseobject kind="type" name="size_t"/>

	<baseobject kind="const" name="ConstantValue" label="Constant\nValue"/>
	<baseobject kind="const" name="IntegralConstant" label="Integral\nConstant"/>
	<baseobject kind="const" name="BooleanConstant" label="Boolean\nConstant"/>
	<baseobject kind="const" name="StringConstant" label="String\nConstant"/>
	<baseobject kind="const" name="SourceLocation" label="Source\nLocation"/>

	<metaobject name="Object"
		since_revision="0"
		abstract="true"
		reflects="a base-level program declaration"
		is_a="a concept modelled by stateless anonymous types generated
by the compiler which allow access to metadata reflecting specific program declarations"
	/>

	<operation name="reflects_same"
		since_revision="0"
		brief="indicates if two metaobjects reflect the same base-level
		declaration ('entity')."
		result="BooleanConstant"
	>
		<argument type="Object"/>
		<argument type="Object"/>
	</operation>

	<operation name="get_source_location"
		since_revision="0"
		brief="returns the source location info of the declaration
		of $(reflected) reflected by a $(operand)."
		result="SourceLocation"
	>
		<argument type="Object"/>
	</operation>

	<metaobject name="ObjectSequence"
		since_revision="0"
		abstract="true"
		label="Object\nSequence"
		reflects="an ordered sequence of metaobjects"
		brief="is an ordered sequence of metaobjects."
	>
		<generalization concept="Object"/>
	</metaobject>

	<trait name="is_sequence"
		since_revision="0"
		indicates="ObjectSequence"
	/>

	<operation name="get_size"
		since_revision="0"
		result="IntegralConstant"
		integer="size_t"
		brief="returns the number of elements in the sequence."
	>
		<argument type="ObjectSequence"/>
	</operation>

	<operation name="get_element"
		since_revision="0"
		result="Object"
		brief="returns the i-th $(result) in a $(operand)."
	>
		<argument type="ObjectSequence"/>
		<argument type="size_t" name="Index"/>
	</operation>

	<operation name="unpack_elements"
		since_revision="2"
		result="Type"
		brief="Unpacks the $(operand) into a template."
	>
		<argument type="ObjectSequence"/>
	</operation>

	<operation name="expose_protected"
		since_revision="2"
		result="ObjectSequence"
		brief="Returns a $(result) including protected members."
	>
		<argument type="ObjectSequence"/>
	</operation>

	<operation name="expose_private"
		since_revision="2"
		result="ObjectSequence"
		brief="Returns a $(result) including protected and private members."
	>
		<argument type="ObjectSequence"/>
	</operation>

	<metaobject name="Reversible"
		since_revision="1"
		abstract="true"
		is_a="a metaobject that can be reverted to the original
		declaration"
		reflects="a reversible declaration"
	>
		<generalization concept="Object"/>
		<order_after concept="ObjectSequence"/>
	</metaobject>

	<trait name="is_reversible"
		since_revision="1"
		indicates="Reversible"
	/>

	<metaobject name="Named"
		since_revision="0"
		abstract="true"
		reflects="a named declaration"
	>
		<generalization concept="Object"/>
		<order_after concept="ObjectSequence"/>
	</metaobject>

	<trait name="is_named"
		since_revision="0"
		indicates="Named"
	/>

	<operation name="is_anonymous"
		since_revision="2"
		result="BooleanConstant"
		brief="Indicates if the $(reflected) reflected by a $(operand)
		is anonymous."
	>
		<argument type="Named"/>
	</operation>

	<operation name="get_name"
		since_revision="0"
		result="StringConstant"
		brief="returns the basic name of the $(reflected) reflected by
		a $(operand)."
	>
		<argument type="Named"/>
	</operation>

	<operation name="get_display_name"
		since_revision="2"
		result="StringConstant"
		brief="returns the display name of the $(reflected) reflected by
		a $(operand)."
	>
		<argument type="Named"/>
	</operation>

	<metaobject name="Specifier"
		since_revision="1"
		reflects="a specifier (const, virtual, static, noexcept, public,
		protected, private, etc.)"
	>
		<generalization concept="Named"/>
	</metaobject>

	<trait name="is_specifier"
		since_revision="1"
		indicates="Specifier"
	/>

	<metaobject name="Typed"
		since_revision="0"
		abstract="true"
		reflects="a base-level declaration with a type (for example
		a variable)"
	>
		<generalization concept="Object"/>
	</metaobject>

	<trait name="is_typed"
		since_revision="0"
		indicates="Typed"
	/>

	<operation name="get_type"
		since_revision="0"
		result="Type"
		brief="returns the $(result) reflecting the type of $(reflected)
		reflected by a $(operand)."
	>
		<argument type="Typed"/>
	</operation>

	<metaobject name="ScopeMember"
		since_revision="0"
		abstract="true"
		reflects="a declaration nested in a scope (like the global scope,
		namespace, class, enum, etc.)"
	>
		<generalization concept="Object"/>
		<order_after concept="Named"/>
	</metaobject>

	<trait name="is_scope_member"
		since_revision="0"
		indicates="ScopeMember"
	/>

	<operation name="get_scope"
		since_revision="0"
		result="Scope"
		brief="returns the $(result) reflecting the scope of $(reflected)
		reflected by a $(operand)."
	>
		<argument type="ScopeMember"/>
	</operation>

	<metaobject name="Scope"
		since_revision="0"
		abstract="true"
		reflects="a scope"
	>
		<generalization concept="Object"/>
	</metaobject>

	<trait name="is_scope"
		since_revision="0"
		indicates="Scope"
	/>

	<metaobject name="Alias"
		since_revision="0"
		abstract="true"
		reflects="a type or namespace alias"
	>
		<generalization concept="Named"/>
	</metaobject>

	<trait name="is_alias"
		since_revision="0"
		indicates="Alias"
	/>

	<operation name="get_aliased"
		since_revision="0"
		result="Named"
		brief="returns the $(result) reflecting the original declaration
		of $(reflected) reflected by a $(operand)."
	>
		<argument type="Alias"/>
	</operation>

	<metaobject name="ClassMember"
		since_revision="0"
		abstract="true"
		reflects="a class member"
	>
		<generalization concept="ScopeMember"/>
		<constraint operation="get_scope" concept="Class"/>
		<order_after concept="Class"/>
	</metaobject>

	<trait name="is_class_member"
		since_revision="0"
		indicates="ClassMember"
	/>

	<operation name="is_public"
		since_revision="0"
		result="BooleanConstant"
		brief="returns whether the $(reflected) reflected by a $(operand)
		was declared with public access."
	>
		<argument type="ClassMember"/>
	</operation>

	<operation name="is_protected"
		since_revision="0"
		result="BooleanConstant"
		brief="returns whether the $(reflected) reflected by a $(operand)
		was declared with protected access."
	>
		<argument type="ClassMember"/>
	</operation>

	<operation name="is_private"
		since_revision="0"
		result="BooleanConstant"
		brief="returns whether the $(reflected) reflected by a $(operand)
		was declared with private access."
	>
		<argument type="ClassMember"/>
	</operation>

	<operation name="get_access_specifier"
		since_revision="1"
		result="Specifier"
		brief="returns the $(result) reflecting the access specifier
		of $(reflected) reflected by a $(operand)."
	>
		<argument type="ClassMember"/>
	</operation>

	<metaobject name="EnumMember"
		since_revision="2"
		abstract="true"
		reflects="a enum member"
	>
		<generalization concept="ScopeMember"/>
		<constraint operation="get_scope" concept="Enum"/>
		<order_after concept="Enum"/>
	</metaobject>

	<trait name="is_enum_member"
		since_revision="2"
		indicates="EnumMember"
	/>

	<metaobject name="Linkable"
		since_revision="0"
		abstract="true"
		reflects="a declaration with storage duration and/or linkage"
	>
		<generalization concept="Named"/>
		<generalization concept="ScopeMember"/>
		<order_after concept="Typed"/>
	</metaobject>

	<trait name="is_linkable"
		since_revision="0"
		indicates="Linkable"
	/>

	<operation name="is_static"
		since_revision="0"
		result="BooleanConstant"
		brief="returns whether the $(reflected) reflected by a $(operand)
		was declared with the static specifier."
	>
		<argument type="Linkable"/>
	</operation>

	<metaobject name="Namespace"
		since_revision="0"
		reflects="a namespace"
	>
		<generalization concept="Named"/>
		<generalization concept="Scope"/>
		<generalization concept="ScopeMember"/>
	</metaobject>

	<trait name="is_namespace"
		since_revision="0"
		indicates="Namespace"
	/>

	<metaobject name="GlobalScope"
		since_revision="0"
		reflects="the global scope"
		label="Global\nScope"
	>
		<generalization concept="Namespace"/>
	</metaobject>

	<trait name="is_global_scope"
		since_revision="0"
		indicates="GlobalScope"
	/>

	<metaobject name="NamespaceAlias"
		since_revision="0"
		reflects="a namespace alias"
		label="Namespace\nAlias"
	>
		<generalization concept="Namespace"/>
		<generalization concept="Alias"/>
		<constraint operation="get_aliased" concept="Namespace"/>
	</metaobject>

	<metaobject name="Type"
		since_revision="0"
		reflects="a type"
	>
		<generalization concept="Reversible"/>
		<generalization concept="Named"/>
		<generalization concept="ScopeMember"/>
	</metaobject>

	<trait name="is_type"
		since_revision="0"
		indicates="Type"
	/>

	<operation name="get_reflected_type"
		since_revision="0"
		result="OriginalType"
		brief="returns the the base-level type reflected by a $(operand)."
	>
		<argument type="Type"/>
	</operation>

	<metaobject name="TypeAlias"
		since_revision="0"
		label="Type\nAlias"
		reflects="a type alias or typedef"
	>
		<generalization concept="Type"/>
		<generalization concept="Alias"/>
		<constraint operation="get_aliased" concept="Type"/>
	</metaobject>

	<metaobject name="TagType"
		since_revision="2"
		abstract="true"
		reflects="a class or an enum"
	>
		<generalization concept="Type"/>
		<generalization concept="Scope"/>
	</metaobject>

	<trait name="is_tag_type"
		since_revision="2"
		indicates="TagType"
	/>

	<operation name="get_elaborated_type_specifier"
		since_revision="2"
		result="Specifier"
		brief="returns a $(result) reflecting the elaborated type specifier
		(class,struct,union,...) of $(reflected) reflected by a $(operand)."
	>
		<argument type="TagType"/>
	</operation>

	<metaobject name="Class"
		since_revision="0"
		reflects="a class"
	>
		<generalization concept="TagType"/>
	</metaobject>

	<trait name="is_class"
		since_revision="0"
		indicates="Class"
	/>

	<operation name="get_data_members"
		since_revision="0"
		result="ObjectSequence" element="DataMember"
		brief="returns a $(result) of $(elements) reflecting
		the public data members of $(reflected) reflected by a $(operand)."
	>
		<argument type="Class"/>
	</operation>

	<operation name="get_member_types"
		since_revision="1"
		result="ObjectSequence" element="MemberType"
		brief="returns a $(result) of $(elements) reflecting
		the public member types of $(reflected) reflected by a $(operand)."
	>
		<argument type="Class"/>
	</operation>

	<metaobject name="Enum"
		since_revision="0"
		reflects="an enumeration"
	>
		<generalization concept="TagType"/>
	</metaobject>

	<trait name="is_enum"
		since_revision="0"
		indicates="Enum"
	/>

	<operation name="is_scoped"
		since_revision="2"
		result="BooleanConstant"
		brief="returns true if the $(reflected) reflected by a $(operand)
		is scoped (strongly-typed)."
	>
		<argument type="Enum"/>
	</operation>

	<operation name="get_enumerators"
		since_revision="1"
		result="ObjectSequence" element="Enumerator"
		brief="returns a $(result) of $(elements) reflecting all
		enumerators of $(reflected) reflected by a $(operand)."
	>
		<argument type="Enum"/>
	</operation>

	<metaobject name="Constant"
		since_revision="1"
		abstract="true"
		reflects="a compile-time constant value"
	>
		<generalization concept="Typed"/>
	</metaobject>

	<trait name="is_constant"
		since_revision="1"
		indicates="Constant"
	/>

	<operation name="get_constant"
		since_revision="1"
		result="ConstantValue"
		brief="returns the value of $(reflected) reflected by a $(operand)."
	>
		<argument type="Constant"/>
	</operation>

	<metaobject name="Variable"
		since_revision="0"
		reflects="a variable"
	>
		<generalization concept="Linkable"/>
		<generalization concept="Named"/>
		<generalization concept="Typed"/>
	</metaobject>

	<trait name="is_variable"
		since_revision="0"
		indicates="Variable"
	/>

	<operation name="get_pointer"
		uname="get_data_pointer"
		since_revision="0"
		result="Pointer"
		brief="returns a pointer to the $(reflected) reflected by a $(operand).
		If the variable is a class member then the pointer is a class data member pointer,
		otherwise it is a plain pointer."
	>
		<argument type="Variable"/>
	</operation>

	<metaobject name="DataMember"
		since_revision="0"
		reflects="a class data member"
	>
		<generalization concept="ClassMember"/>
		<generalization concept="Variable"/>
	</metaobject>

	<metaobject name="MemberType"
		since_revision="1"
		reflects="a class member type (typedef, class, union, enum)"
	>
		<generalization concept="ClassMember"/>
		<generalization concept="Type"/>
	</metaobject>

	<metaobject name="Enumerator"
		since_revision="2"
		reflects="an enumerator"
	>
		<generalization concept="Constant"/>
		<generalization concept="Named"/>
		<generalization concept="EnumMember"/>
		<constraint operation="get_type" concept="Enum"/>
		<order_after concept="Enum"/>
	</metaobject>

	<trait name="is_enumerator"
		since_revision="2"
		indicates="Enumerator"
	/>
</concepts>
